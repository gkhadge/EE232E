network_data <- read.csv(file = "~/Documents/EE219/network_backup_dataset.csv", header = TRUE, stringsAsFactors=FALSE)
# import data from csv files
# might need to change to file location!
hrVec_0 = {}
hrVec_1 = {}
hrVec_2 = {}
hrVec_3 = {}
hrVec_4 = {}
# create empty vectors for storing data according to work flow
fl_list <- split(network_data, as.factor(network_data$Work.Flow.ID))
# separate the data according to workflow
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
# create string vector for looping through each day
for(ii in 0:4)
{
if (ii==0) {flTemp = fl_list$work_flow_0}
if (ii==1) {flTemp = fl_list$work_flow_1}
if (ii==2) {flTemp = fl_list$work_flow_2}
if (ii==3) {flTemp = fl_list$work_flow_3}
if (ii==4) {flTemp = fl_list$work_flow_4}
# create cases for each work flow
for (jj in 1:3)
{
wk = flTemp[(flTemp$Week.. ==jj),]
# separate the data by week
for (kk in 1:7)
{
dy = wk[(wk$Day.of.Week == days[kk]),]
# separate the data by day of the week (using strings created before)
for (ll in seq(1, 21, 4))
{
hr = dy[(dy$Backup.Start.Time...Hour.of.Day == ll),]
# separate the data by backup start hour
if (is.data.frame(hr) && nrow(hr)==0)
{ hrSum = 0 }
# some work flows do not get backed up and are empty at this stage
# set the size of the data at zero when this occurs
else {
hrSum = sum(hr[6])
# otherwise, sum the sizes of the files
}
if (jj ==3 & kk == 7 & ll==21){
break
# do not plot the last day of week 3 (stop at day 20)
}
else{
if (ii==0) {hrVec_0 <- c(hrVec_0, hrSum)}
if (ii==1) {hrVec_1 <- c(hrVec_1, hrSum)}
if (ii==2) {hrVec_2 <- c(hrVec_2, hrSum)}
if (ii==3) {hrVec_3 <- c(hrVec_3, hrSum)}
if (ii==4) {hrVec_4 <- c(hrVec_4, hrSum)}
# put data into vectors according to work flow
}
}
}
}
}
xplot <- seq(1, 20, length.out=125)
# create vector for plotting the data, size is number of hours
plot(xplot, hrVec_0, main="Work Flow 0",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_1, main="Work Flow 1",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_2, main="Work Flow 2",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_3, main="Work Flow 3",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_4, main="Work Flow 4",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
# 2) Linear Regression p-values
week = network_data$Week..
dayofweek = {}
backupstarttime=  network_data$Backup.Start.Time...Hour.of.Day
workflowid = {}
filename = {}
sizeofbackup = network_data$Size.of.Backup..GB.
backuptime = network_data$Backup.Time..hour.
# p-values by Week
pval_week = cor.test(network_data$Week..,network_data$Size.of.Backup..GB.)$p.value
# p-values by Day of Week
dayofweek[network_data$Day.of.Week=="Monday"] <- 0
dayofweek[network_data$Day.of.Week=="Tuesday"] <- 1
dayofweek[network_data$Day.of.Week=="Wednesday"]<-2
dayofweek[network_data$Day.of.Week=="Thursday"]<-3
dayofweek[network_data$Day.of.Week=="Friday"]<-4
dayofweek[network_data$Day.of.Week=="Saturday"]<-5
dayofweek[network_data$Day.of.Week=="Sunday"]<-6
pval_dayofweek = cor.test(dayofweek,network_data$Size.of.Backup..GB.)$p.value
# p-values by Backup Start Time
pval_starttime = cor.test(network_data$Backup.Start.Time...Hour.of.Day,network_data$Size.of.Backup..GB.)$p.value
# p-values by Workflow ID
workflowid[network_data$Work.Flow.ID=="work_flow_0"] <- 0
workflowid[network_data$Work.Flow.ID=="work_flow_1"] <- 1
workflowid[network_data$Work.Flow.ID=="work_flow_2"] <-2
workflowid[network_data$Work.Flow.ID=="work_flow_3"] <-3
workflowid[network_data$Work.Flow.ID=="work_flow_4"] <-4
pval_workflowid= cor.test(workflowid,network_data$Size.of.Backup..GB.)$p.value
# p-values by File Name
filename[network_data$File.Name=="File_0"] <- 0
filename[network_data$File.Name=="File_1"] <- 1
filename[network_data$File.Name=="File_2"] <- 2
filename[network_data$File.Name=="File_3"] <- 3
filename[network_data$File.Name=="File_4"] <- 4
filename[network_data$File.Name=="File_5"] <- 5
filename[network_data$File.Name=="File_6"] <- 6
filename[network_data$File.Name=="File_7"] <- 7
filename[network_data$File.Name=="File_8"] <- 8
filename[network_data$File.Name=="File_9"] <- 9
filename[network_data$File.Name=="File_10"] <- 10
filename[network_data$File.Name=="File_11"] <- 1
filename[network_data$File.Name=="File_12"] <- 12
filename[network_data$File.Name=="File_13"] <- 13
filename[network_data$File.Name=="File_14"] <- 14
filename[network_data$File.Name=="File_15"] <- 15
filename[network_data$File.Name=="File_16"] <- 16
filename[network_data$File.Name=="File_17"] <- 17
filename[network_data$File.Name=="File_18"] <- 18
filename[network_data$File.Name=="File_19"] <- 19
filename[network_data$File.Name=="File_20"] <- 20
filename[network_data$File.Name=="File_21"] <- 21
filename[network_data$File.Name=="File_22"] <- 22
filename[network_data$File.Name=="File_23"] <- 23
filename[network_data$File.Name=="File_24"] <- 24
filename[network_data$File.Name=="File_25"] <- 25
filename[network_data$File.Name=="File_26"] <- 26
filename[network_data$File.Name=="File_27"] <- 27
filename[network_data$File.Name=="File_28"] <- 28
filename[network_data$File.Name=="File_29"] <- 29
pval_filename = cor.test(filename,network_data$Size.of.Backup..GB.)$p.value
# p-values by Backup Time
pval_backuptime = cor.test(backuptime,network_data$Size.of.Backup..GB.)$p.value
#-------------------------------------------------------------------------------------#
# Boston Housing Dataset
# 4) Regression by Features
# P-value calculations for Boston Housing Data
pCRIM = cor.test(housing_data$V1,housing_data$V14)$p.value
pZN = cor.test(housing_data$V2,housing_data$V14)$p.value
pINDUS = cor.test(housing_data$V3,housing_data$V14)$p.value
pCHAS = cor.test(housing_data$V4,housing_data$V14)$p.value
pNOX = cor.test(housing_data$V5,housing_data$V14)$p.value
pRM = cor.test(housing_data$V6,housing_data$V14)$p.value
pAGE = cor.test(housing_data$V7,housing_data$V14)$p.value
pDIS = cor.test(housing_data$V8,housing_data$V14)$p.value
pRAD = cor.test(housing_data$V9,housing_data$V14)$p.value
pTAX = cor.test(housing_data$V10,housing_data$V14)$p.value
pPTRATIO = cor.test(housing_data$V11,housing_data$V14)$p.value
pB1000 = cor.test(housing_data$V12,housing_data$V14)$p.value
pLSTAT = cor.test(housing_data$V13,housing_data$V14)$p.value
source('~/Documents/232_hw1.R', echo=TRUE)
source('~/Documents/232_hw1.R', echo=TRUE)
install.packages("igraph")
source('~/Documents/EE232E/project_1/yusi_p3.R', echo=TRUE)
plot(g, vertex.size=8, vertex.label=NA)
modularity(fg, membership(cmsize))
modularity(fg, fg.membership)
membership(fg)
modularity(fg, membership(fg))
source('~/Documents/EE232E/Katie_workspace/Katie_HW1.R', echo=TRUE)
source('~/Documents/EE232E/Katie_workspace/Katie_HW1.R', echo=TRUE)
source('~/Documents/EE232E/Katie_workspace/Katie_HW1.R', echo=TRUE)
community_str <- fastgreedy.community(gcc, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity = modularity(community_str)
modularity(community_str)
sizes(community_str)
barplot(sizes(community_str))
barplot(sizes(community_str),  main="Community Sizes (2b)", xlab="Community Number", ylab="Community Size")
barplot(deg_dist2a, main="Degree Distribution (2a)", xlab="Degree Number", ylab="Probability")
deg_dist2a <- degree(g2a)
barplot(deg_dist2a, main="Degree Distribution (2a)", xlab="Degree Number", ylab="Probability")
hist(deg_dist2a, main="Degree Distribution (2a)", xlab="Degree Number", ylab="Probability")
modularity(community_str)
community_str <- fastgreedy.community(gcc, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str)
is.connected(g2a)
cl <- clusters(g2a)
gccIndex <- which.max(cl$size)
nonGccNodes <- (1:vcount(g))[cl$membership != gccIndex]
gcc <- delete.vertices(g, nonGccNodes)
community_str <- fastgreedy.community(gcc, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str)
sizes(community_str)
barplot(sizes(community_str),  main="Community Sizes (2b)", xlab="Community Number", ylab="Community Size")
library(igraph)
nodesNum = 1000
p1 = 0.01
g <- sample_gnp(nodesNum, p1, directed = FALSE, loops = FALSE)
plot(g, vertex.size = 2)
deg_dist <- degree_distribution(g)
plot(0: (length(deg_dist)-1), deg_dist)
is.connected(g)
dia <- diameter(g, unconnected = TRUE)
#2
#Create a network with a fat-tailed degree distribution
#2-a
degreePro = -3
g2a = barabasi.game(nodesNum, degreePro, directed = FALSE)
deg_dist2a <- degree(g2a)
hist(deg_dist2a, main="Degree Distribution (2a)", xlab="Degree Number", ylab="Probability")
dia2a <- diameter(g2a, unconnected = TRUE)
#2-b
is.connected(g2a)
cl <- clusters(g2a)
gccIndex <- which.max(cl$size)
nonGccNodes <- (1:vcount(g))[cl$membership != gccIndex]
gcc <- delete.vertices(g, nonGccNodes)
#community structure
community_str <- fastgreedy.community(gcc, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str)
sizes(community_str)
barplot(sizes(community_str),  main="Community Sizes (2b)", xlab="Community Number", ylab="Community Size")
##Download and install the package
#install.packages("igraph")
##Load package
library(igraph)
nodesNum = 1000
#2
#Create a network with a fat-tailed degree distribution
#2-a
degreePro = -3
g_2a = barabasi.game(nodesNum, degreePro, directed = FALSE)
deg_dist_2a <- degree(g_2a)
hist(deg_dist_2a, main="Degree Distribution (_2a)", xlab="Degree Number", ylab="Probability")
dia_2a <- diameter(g_2a, unconnected = TRUE)
#2-b
is.connected(g_2a)
cl_2a <- clusters(g_2a)
gccIndex_2a <- which.max(cl_2a$size)
nonGccNodes_2b <- (1:vcount(g_2a))[cl_2a$membership != gccIndex_2a]
gcc_2b <- delete.vertices(g_2a, nonGccNodes_2b)
community_str_2b <- fastgreedy.community(gcc_2b, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str_2b)
sizes(community_str_2b)
barplot(sizes(community_str_2b),  main="Community Sizes (2b)", xlab="Community Number", ylab="Community Size")
g_2c = barabasi.game(nodesNum2, degreePro, directed = FALSE)
deg_dist_2c <- degree_distribution(g_2c)
barplot(deg_dist_2c)
dia_2c <- diameter(g_2c, unconnected = TRUE)
g_2c = barabasi.game(nodesNum2, degreePro, directed = FALSE)
deg_dist_2c <- degree_distribution(g_2c)
barplot(deg_dist_2c)
dia_2c <- diameter(g_2c, unconnected = TRUE)
nodesNum2 = 10000
g_2c = barabasi.game(nodesNum2, degreePro, directed = FALSE)
deg_dist_2c <- degree_distribution(g_2c)
barplot(deg_dist_2c)
dia_2c <- diameter(g_2c, unconnected = TRUE)
nodesNum2 = 10000
g_2c = barabasi.game(nodesNum2, degreePro, directed = FALSE)
deg_dist_2c <- degree(g_2c)
hist(deg_dist_2c, main="Degree Distribution (2c)", xlab="Degree Number", ylab="Probability")
dia_2c <- diameter(g_2c, unconnected = TRUE)
cl_2c <- clusters(g_2c)
gccIndex_2c <- which.max(cl_2c$size)
nonGccNodes_2c <- (1:vcount(g))[cl_2c$membership != gccIndex_2c]
gcc_2c <- delete.vertices(g_2c, nonGccNodes_2c)
community_str_2c <- fastgreedy.community(gcc_2c, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str_2c)
sizes(community_str_2c)
barplot(sizes(community_str_2c),  main="Community Sizes (2c)", xlab="Community Number", ylab="Community Size")
help head
dg_dist = degree(g)
hist(deg_dist, main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
fg <- fastgreedy.community(g)
membership(fg)
cmsize <- sizes(fg)
barplot(cmsize,  main="Community Sizes (3b)", xlab="Community Number", ylab="Community Size")
modularity(fg, membership(fg))
# create barabasi graph
nodesNum = 1000
g <- barabasi.game(nodesNum , directed = FALSE)
plot(g, vertex.size=8, vertex.label=NA)
dg_dist = degree(g)
hist(deg_dist, main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
# find communities
fg <- fastgreedy.community(g)
membership(fg)
cmsize <- sizes(fg)
barplot(cmsize,  main="Community Sizes (3b)", xlab="Community Number", ylab="Community Size")
modularity(fg, membership(fg))
is.connected(g_2a)
is.connected(g_2c)
source('~/Documents/EE232E/Katie_workspace/Katie_HW1.R', echo=TRUE)
community_str_2c <- fastgreedy.community(gcc_2c, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str_2c)
sizes(community_str_2c)
barplot(sizes(community_str_2c),  main="Community Sizes (2c)", xlab="Community Number", ylab="Community Size")
source('~/Documents/EE232E/HW_1/HW1_p3.R', echo=TRUE)
source('~/Documents/EE232E/HW_1/HW1_p3.R', echo=TRUE)
library(igraph)
nodesNum = 1000
#2
#Create a network with a fat-tailed degree distribution
#2-a
degreePro = -3
g_2a = barabasi.game(nodesNum, degreePro, directed = FALSE)
deg_dist_2a <- degree(g_2a)
hist(deg_dist_2a, main="Degree Distribution (2a)", xlab="Degree Number", ylab="Probability")
dia_2a <- diameter(g_2a, unconnected = TRUE)
library(igraph)
nodesNum = 1000
#2
#Create a network with a fat-tailed degree distribution
#2-a
degreePro = -3
g_2a = barabasi.game(nodesNum, degreePro, directed = FALSE)
deg_dist_2a <- degree(g_2a)
hist(deg_dist_2a, main="Degree Distribution (2a)", xlab="Degree Number", ylab="Probability")
dia_2a <- diameter(g_2a, unconnected = TRUE)
#2-b
is.connected(g_2a)
cl_2a <- clusters(g_2a)
gccIndex_2a <- which.max(cl_2a$size)
nonGccNodes_2b <- (1:vcount(g_2a))[cl_2a$membership != gccIndex_2a]
gcc_2b <- delete.vertices(g_2a, nonGccNodes_2b)
#community structure
community_str_2b <- fastgreedy.community(gcc_2b, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str_2b)
sizes(community_str_2b)
barplot(sizes(community_str_2b),  main="Community Sizes (2b)", xlab="Community Number", ylab="Community Size")
nodesNum2 = 10000
g_2c = barabasi.game(nodesNum2, degreePro, directed = FALSE)
deg_dist_2c <- degree(g_2c)
hist(deg_dist_2c, main="Degree Distribution (2c)", xlab="Degree Number", ylab="Probability")
dia_2c <- diameter(g_2c, unconnected = TRUE)
is.connected(g_2c)
#GCC calculation
cl_2c <- clusters(g_2c)
gccIndex_2c <- which.max(cl_2c$size)
nonGccNodes_2c <- (1:vcount(g))[cl_2c$membership != gccIndex_2c]
gcc_2c <- delete.vertices(g_2c, nonGccNodes_2c)
#community structure
community_str_2c <- fastgreedy.community(gcc_2c, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str_2c)
sizes(community_str_2c)
barplot(sizes(community_str_2c),  main="Community Sizes (2c)", xlab="Community Number", ylab="Community Size")
hist(dg_dist, log  = "xy", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
hist(dg_dist, log  = "xy", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
source('~/Documents/EE232E/HW_1/HW1_p3.R', echo=TRUE)
dg_dist = log(degree(g))
hist(dg_dist, main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
hist(dg_dist, log = "x", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
dg_dist = log(degree(g))
hist(dg_dist, log = "x", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
dg_dist = degree.distribution(g)
plot(dg_dist, log = "xy", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
dg_dist = degree.distribution(g)
x_plot = 0:(length(dg_dist)-1)
plot(x_plot, dg_dist, log = "xy", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
# find commu
source('~/Documents/EE232E/HW_1/HW1_p2.R', echo=TRUE)
hist(degree_array)
degree_prob_hist <- hist(degree_array)
sum(hist(degree_array)$density)
sum(deg_dist_2a)
plot(x_plot, dd1, log="y", main="Degree Distribution (2a and 2d)", xlab="Degree",ylab="Probability")
points(x_plot_2a, dd2, col=2, pch=2)
plot(x_plot, dd1, log="y", main="Degree Distribution (2a and 2d)", xlab="Degree",ylab="Probability")
plot(x_plot, dd1, log="y", main="Degree Distribution (2a and 2d)", xlab="Degree",ylab="Probability")
points(x_plot_2a, dd2, col=2, pch=2)
plot(deg_dist_2c, log = "y", main="Degree Distribution (2c)", xlab="Degree Number", ylab="Probability")
nodesNum2 = 10000
g_2c = barabasi.game(nodesNum2, degreePro, directed = FALSE)
deg_dist_2c <- degree.distribution(g_2c)
x_plot_2c = 0:(length(deg_dist_2c)-1)
plot(deg_dist_2c, log = "y", main="Degree Distribution (2c)", xlab="Degree Number", ylab="Probability")
dia_2c <- diameter(g_2c, unconnected = TRUE)
is.connected(g_2c)
degreePro = -3
g_2a = barabasi.game(nodesNum, degreePro, directed = FALSE)
deg_dist_2a <- degree.distribution(g_2a)
x_plot_2a = 0:(length(deg_dist_2a)-1)
plot(deg_dist_2a, log = "y", main="Degree Distribution (2a)", xlab="Degree Number", ylab="Probability")
dia_2a <- diameter(g_2a, unconnected = TRUE)
source('~/Documents/EE232E/Yusi_workspace/HW2_p2.R', echo=TRUE)
source('~/Documents/EE232E/Yusi_workspace/HW2_p2.R', echo=TRUE)
diameter(g_2a)
source('~/Documents/EE232E/Yusi_workspace/HW2_p2.R', echo=TRUE)
source('~/Documents/EE232E/Yusi_workspace/HW2_p1.R', echo=TRUE)
is.connected(g_1a)
p = 0.007
numNodes = 1000
g_1a <- sample_gnp(numNodes, p)
plot(g_1a, vertex.label = NA)
diameter(g_1a)
is.connected(g_1a)
p = 0.008
numNodes = 1000
g_1a <- sample_gnp(numNodes, p)
plot(g_1a, vertex.label = NA)
diameter(g_1a)
is.connected(g_1a)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
diameter(g_1a)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
diameter(g_1a)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
for (t in seq(minSteps, maxSteps, stepInt)) {print t}
for (t in seq(minSteps, maxSteps, stepInt)) {print (t)}
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
for (t in 1:maxSteps/stepInt) {
rw_current = stepVec[t]; print(rw_current)}
1:maxSteps/stepInt
1:(maxSteps/stepInt)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
rw_current
pathLenVec[t,j] <- distances(g_1a, v=rw[1], to=rw[rw_current], mode = "out", weights = NULL)
pathLenVec[t,j] <- distances(g_1a, v=rw[1], to=rw[0], mode = "out", weights = NULL)
stepVec
minSteps = 1
maxSteps = 400
stepInt = 10
numIter = numNodes
stepVec = seq(minSteps, maxSteps, stepInt)
stepVec
minSteps = 0
maxSteps = 400
stepInt = 10
numIter = numNodes
stepVec = seq(minSteps, maxSteps, stepInt)
minSteps = 0
maxSteps = 400
stepInt = 10
numIter = numNodes
stepVec = seq(minSteps, maxSteps, stepInt)
stepVec[1] = 1
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
pathMeans <- rowMeans(pathLenVec)
pathSds <- rowSds(pathLenVec)
# Plot mean path length results
plot(stepVec, pathMeans, main="Mean Path Length vs. Step Length", xlab="Number of Steps", ylab="Mean Path Length")
points(stepVec, sqrt(steps), col=2, pch=2)
# Plot path length standard deviation results
plot(stepVec, pathSds, main="Path Length Standard Deviation vs. Step Length", xlab="Number of Steps", ylab="Standard Deviation")
stepVec
length(stepVec)
length(pathMeans)
pathMeans
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
length(stepVec)
length(pathMeans)
stepVec
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
maxSteps/stepInt+1
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
# Plot mean path length results
plot(stepVec, pathMeans, main="Mean Path Length vs. Step Length", xlab="Number of Steps", ylab="Mean Path Length")
points(stepVec, sqrt(stepVec), col=2, pch=2)
diameter(g_1a)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
points(1:100, sqrt(1:100), col=2, pch=2)
seq(1,100,10)
points(seq(1,100,10), sqrt(seq(1,100,10)), col=2, pch=2)
points(seq(1,100,10), sqrt(seq(1,100,10)), col=2, pch=2)
plot(stepVec, pathMeans, main="Mean Path Length vs. Step Length", xlab="Number of Steps", ylab="Mean Path Length")
points(seq(1,100,10), sqrt(seq(1,100,10)), col=2, pch=2)
plot(stepVec, pathSds, main="Path Length Standard Deviation vs. Step Length", xlab="Number of Steps", ylab="Standard Deviation")
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/Yusi_workspace/project1.R', echo=TRUE)
c_node <- 1
v_disp <- "19"
v_emb <- "56"
# v_disp_emb <- "19"
core_neighbors <- neighbors(g, v=core_nodes[c_node])
core_personal_nodes <- c(core_nodes[c_node], core_neighbors)
core_personal_network <- induced_subgraph(g, core_personal_nodes)
core_fg <- fastgreedy.community(core_personal_network)
colors_fg <- rainbow(core_fg)
#
# n_large_comm = 8
# greys_fg <- replicate(length(core_fg)-n_large_comm, "#D3D3D3")   # make everything other than largest 8 communities grey
# colors_fg <- c(rainbow(n_large_comm), greys_fg)
# colors_fg[3] = "#FFFF00"    # set third color to yellow for better differentiation
# settings for non-special nodes
V(core_personal_network)$frame.color <- "grey"
# set a different frame color for special nodes
V(core_personal_network)[v_disp]$frame.color <- "black"
V(core_personal_network)[v_emb]$frame.color <- "black"
# V(core_personal_network)[v_disp_emb]$frame.color <- "black"
# settings for non-special edges
E(core_personal_network)$lty <- 1
E(core_personal_network)$width <- 1
E(core_personal_network)$color <- "gray"
disp_edges <- incident_edges(core_personal_network, v_disp)
emb_edges <- incident_edges(core_personal_network, v_emb)
# disp_emb_edges <- incident_edges(core_personal_network, v_disp_emb)
E(core_personal_network)$lty <- 3
for (i in 1:length(disp_edges[[1]])){
# highest dispersion
E(core_personal_network)[disp_edges[[1]][i]]$color <- "SkyBlue2"
E(core_personal_network)[disp_edges[[1]][i]]$lty <- 1
E(core_personal_network)[disp_edges[[1]][i]]$width <- 3
}
for (i in 1:length(emb_edges[[1]])){
# highest dispersion
E(core_personal_network)[emb_edges[[1]][i]]$color <- "DarkGreen"
E(core_personal_network)[emb_edges[[1]][i]]$lty <- 1
E(core_personal_network)[emb_edges[[1]][i]]$width <- 3
}
#
# for (i in 1:length(disp_emb_edges[[1]])){
#   # highest dispersion
#   E(core_personal_network)[disp_emb_edges[[1]][i]]$color <- "Red"
#   E(core_personal_network)[disp_emb_edges[[1]][i]]$lty <- 1
#   E(core_personal_network)[disp_emb_edges[[1]][i]]$width <- 3
# }
plot(core_personal_network, vertex.color=colors_fg[membership(core_fg)], vertex.size = 5, vertex.label = NA,
layout=layout.fruchterman.reingold,main="Community Structure of Core Neighbor Network (Fast Greedy)")
