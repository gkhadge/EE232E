nodesNum = 1000
#2
#Create a network with a fat-tailed degree distribution
#2-a
degreePro = -3
g_2a = barabasi.game(nodesNum, degreePro, directed = FALSE)
deg_dist_2a <- degree(g_2a)
hist(deg_dist_2a, main="Degree Distribution (2a)", xlab="Degree Number", ylab="Probability")
dia_2a <- diameter(g_2a, unconnected = TRUE)
#2-b
is.connected(g_2a)
cl_2a <- clusters(g_2a)
gccIndex_2a <- which.max(cl_2a$size)
nonGccNodes_2b <- (1:vcount(g_2a))[cl_2a$membership != gccIndex_2a]
gcc_2b <- delete.vertices(g_2a, nonGccNodes_2b)
#community structure
community_str_2b <- fastgreedy.community(gcc_2b, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str_2b)
sizes(community_str_2b)
barplot(sizes(community_str_2b),  main="Community Sizes (2b)", xlab="Community Number", ylab="Community Size")
nodesNum2 = 10000
g_2c = barabasi.game(nodesNum2, degreePro, directed = FALSE)
deg_dist_2c <- degree(g_2c)
hist(deg_dist_2c, main="Degree Distribution (2c)", xlab="Degree Number", ylab="Probability")
dia_2c <- diameter(g_2c, unconnected = TRUE)
is.connected(g_2c)
#GCC calculation
cl_2c <- clusters(g_2c)
gccIndex_2c <- which.max(cl_2c$size)
nonGccNodes_2c <- (1:vcount(g))[cl_2c$membership != gccIndex_2c]
gcc_2c <- delete.vertices(g_2c, nonGccNodes_2c)
#community structure
community_str_2c <- fastgreedy.community(gcc_2c, merges=TRUE, modularity=TRUE,membership=TRUE, weights=NULL)
modularity(community_str_2c)
sizes(community_str_2c)
barplot(sizes(community_str_2c),  main="Community Sizes (2c)", xlab="Community Number", ylab="Community Size")
hist(dg_dist, log  = "xy", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
hist(dg_dist, log  = "xy", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
source('~/Documents/EE232E/HW_1/HW1_p3.R', echo=TRUE)
dg_dist = log(degree(g))
hist(dg_dist, main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
hist(dg_dist, log = "x", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
dg_dist = log(degree(g))
hist(dg_dist, log = "x", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
dg_dist = degree.distribution(g)
plot(dg_dist, log = "xy", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
dg_dist = degree.distribution(g)
x_plot = 0:(length(dg_dist)-1)
plot(x_plot, dg_dist, log = "xy", main="Degree Distribution (3a)", xlab="Degree Number", ylab="Probability")
# find commu
source('~/Documents/EE232E/HW_1/HW1_p2.R', echo=TRUE)
hist(degree_array)
degree_prob_hist <- hist(degree_array)
sum(hist(degree_array)$density)
sum(deg_dist_2a)
plot(x_plot, dd1, log="y", main="Degree Distribution (2a and 2d)", xlab="Degree",ylab="Probability")
points(x_plot_2a, dd2, col=2, pch=2)
plot(x_plot, dd1, log="y", main="Degree Distribution (2a and 2d)", xlab="Degree",ylab="Probability")
plot(x_plot, dd1, log="y", main="Degree Distribution (2a and 2d)", xlab="Degree",ylab="Probability")
points(x_plot_2a, dd2, col=2, pch=2)
plot(deg_dist_2c, log = "y", main="Degree Distribution (2c)", xlab="Degree Number", ylab="Probability")
nodesNum2 = 10000
g_2c = barabasi.game(nodesNum2, degreePro, directed = FALSE)
deg_dist_2c <- degree.distribution(g_2c)
x_plot_2c = 0:(length(deg_dist_2c)-1)
plot(deg_dist_2c, log = "y", main="Degree Distribution (2c)", xlab="Degree Number", ylab="Probability")
dia_2c <- diameter(g_2c, unconnected = TRUE)
is.connected(g_2c)
degreePro = -3
g_2a = barabasi.game(nodesNum, degreePro, directed = FALSE)
deg_dist_2a <- degree.distribution(g_2a)
x_plot_2a = 0:(length(deg_dist_2a)-1)
plot(deg_dist_2a, log = "y", main="Degree Distribution (2a)", xlab="Degree Number", ylab="Probability")
dia_2a <- diameter(g_2a, unconnected = TRUE)
source('~/Documents/EE232E/Yusi_workspace/HW2_p2.R', echo=TRUE)
source('~/Documents/EE232E/Yusi_workspace/HW2_p2.R', echo=TRUE)
diameter(g_2a)
source('~/Documents/EE232E/Yusi_workspace/HW2_p2.R', echo=TRUE)
source('~/Documents/EE232E/Yusi_workspace/HW2_p1.R', echo=TRUE)
is.connected(g_1a)
p = 0.007
numNodes = 1000
g_1a <- sample_gnp(numNodes, p)
plot(g_1a, vertex.label = NA)
diameter(g_1a)
is.connected(g_1a)
p = 0.008
numNodes = 1000
g_1a <- sample_gnp(numNodes, p)
plot(g_1a, vertex.label = NA)
diameter(g_1a)
is.connected(g_1a)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
diameter(g_1a)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
diameter(g_1a)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
for (t in seq(minSteps, maxSteps, stepInt)) {print t}
for (t in seq(minSteps, maxSteps, stepInt)) {print (t)}
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
for (t in 1:maxSteps/stepInt) {
rw_current = stepVec[t]; print(rw_current)}
1:maxSteps/stepInt
1:(maxSteps/stepInt)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
rw_current
pathLenVec[t,j] <- distances(g_1a, v=rw[1], to=rw[rw_current], mode = "out", weights = NULL)
pathLenVec[t,j] <- distances(g_1a, v=rw[1], to=rw[0], mode = "out", weights = NULL)
stepVec
minSteps = 1
maxSteps = 400
stepInt = 10
numIter = numNodes
stepVec = seq(minSteps, maxSteps, stepInt)
stepVec
minSteps = 0
maxSteps = 400
stepInt = 10
numIter = numNodes
stepVec = seq(minSteps, maxSteps, stepInt)
minSteps = 0
maxSteps = 400
stepInt = 10
numIter = numNodes
stepVec = seq(minSteps, maxSteps, stepInt)
stepVec[1] = 1
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
pathMeans <- rowMeans(pathLenVec)
pathSds <- rowSds(pathLenVec)
# Plot mean path length results
plot(stepVec, pathMeans, main="Mean Path Length vs. Step Length", xlab="Number of Steps", ylab="Mean Path Length")
points(stepVec, sqrt(steps), col=2, pch=2)
# Plot path length standard deviation results
plot(stepVec, pathSds, main="Path Length Standard Deviation vs. Step Length", xlab="Number of Steps", ylab="Standard Deviation")
stepVec
length(stepVec)
length(pathMeans)
pathMeans
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
length(stepVec)
length(pathMeans)
stepVec
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
maxSteps/stepInt+1
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
# Plot mean path length results
plot(stepVec, pathMeans, main="Mean Path Length vs. Step Length", xlab="Number of Steps", ylab="Mean Path Length")
points(stepVec, sqrt(stepVec), col=2, pch=2)
diameter(g_1a)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
points(1:100, sqrt(1:100), col=2, pch=2)
seq(1,100,10)
points(seq(1,100,10), sqrt(seq(1,100,10)), col=2, pch=2)
points(seq(1,100,10), sqrt(seq(1,100,10)), col=2, pch=2)
plot(stepVec, pathMeans, main="Mean Path Length vs. Step Length", xlab="Number of Steps", ylab="Mean Path Length")
points(seq(1,100,10), sqrt(seq(1,100,10)), col=2, pch=2)
plot(stepVec, pathSds, main="Path Length Standard Deviation vs. Step Length", xlab="Number of Steps", ylab="Standard Deviation")
source('~/Documents/EE232E/HW_2/HW2_p12.R', echo=TRUE)
#find the modularity of community structure
modularity(gcc_ud1_comm)
modularity(gcc_ud2_comm_FG)
modularity(gcc_ud2_comm_LP)
barplot(sizes(gcc_ud1_comm),  main="Community Structure ('each' Edge LP Method)", xlab="Community Number", ylab="Community Size")
barplot(sizes(gcc_ud2_comm_FG),  main="Community Structure ('mean' Edge FG Method)", xlab="Community Number", ylab="Community Size")
barplot(sizes(gcc_ud2_comm_LP),  main="Community Structure ('mean' Edge LP Method)", xlab="Community Number", ylab="Community Size")
sizes(gcc_ud1_comm)
sizes(gcc_ud2_comm_FG)
sizes(gcc_ud2_comm_LP)
library(igraph)
sizes(gcc_ud1_comm)
sizes(gcc_ud2_comm_FG)
sizes(gcc_ud2_comm_LP)
#find the modularity of community structure
modularity(gcc_ud1_comm)
modularity(gcc_ud2_comm_FG)
modularity(gcc_ud2_comm_LP)
barplot(sizes(gcc_ud1_comm),  main="Community Structure ('each' Edge LP Method)", xlab="Community Number", ylab="Community Size")
barplot(sizes(gcc_ud2_comm_FG),  main="Community Structure ('mean' Edge FG Method)", xlab="Community Number", ylab="Community Size")
barplot(sizes(gcc_ud2_comm_LP),  main="Community Structure ('mean' Edge LP Method)", xlab="Community Number", ylab="Community Size")
setwd('/Users/Yusi/Documents/EE232E/HW_3')
hw3graph <- "sorted_directed_net.txt"
# Read in graph from file
g <- read_graph(hw3graph,format="ncol",directed=TRUE)
# Problem1
is.connected(g)
# Extract GCC
cl <- clusters(g)
gccIndex <- which.max(cl$csize)
nonGccNodes <- (1:vcount(g))[cl$membership != gccIndex]
gcc <- delete.vertices(g, nonGccNodes)
# Problem 2
# Plot Outgoing Degree Distribution
gcc_dg_out <- degree(gcc, mode = "out")
gcc_dg_out_hist <- hist(gcc_dg_out,plot=FALSE)
plot(gcc_dg_out_hist$count, log="xy", type='h', lwd=10, lend=2, main = "Outgoing Degree Distribution", xlab = "Degree", ylab = "Number of Nodes")
#plot(degree.distribution(gcc, mode = "out"), main="Outgoing Degree Distribution")
# Plot Incoming Degree Distribution
gcc_dg_in <- degree(gcc, mode = "in")
gcc_dg_in_hist <- hist(gcc_dg_in,plot=FALSE)
plot(gcc_dg_in_hist$count, log="xy", type='h', lwd=10, lend=2, main = "Incoming Degree Distribution", xlab = "Degree", ylab = "Number of Nodes")
#plot(degree.distribution(gcc, mode = "in"), main="Incoming Degree Distribution")
# Problem 3
# Convert to undirected graph (Option 1)
gcc_ud1 <- as.undirected(gcc, mode = "each")
# Convert to undirected graph (Option 2)
gcc_ud2 <- as.undirected(gcc,mode="collapse",edge.attr.comb = "prod")
E(gcc_ud2)$weight <- sqrt(E(gcc_ud2)$weight)
# Find Communities (Option 1)
gcc_ud1_comm <- label.propagation.community(gcc_ud1)
# Find Communities (Option 2)
gcc_ud2_comm_FG <- fastgreedy.community(gcc_ud2)
gcc_ud2_comm_LP <- label.propagation.community(gcc_ud2)
# Note LP is awful, use FG when possible
#find the size of each community
sizes(gcc_ud1_comm)
sizes(gcc_ud2_comm_FG)
sizes(gcc_ud2_comm_LP)
#find the modularity of community structure
modularity(gcc_ud1_comm)
modularity(gcc_ud2_comm_FG)
modularity(gcc_ud2_comm_LP)
barplot(sizes(gcc_ud1_comm),  main="Community Structure ('each' Edge LP Method)", xlab="Community Number", ylab="Community Size")
barplot(sizes(gcc_ud2_comm_FG),  main="Community Structure ('mean' Edge FG Method)", xlab="Community Number", ylab="Community Size")
barplot(sizes(gcc_ud2_comm_LP),  main="Community Structure ('mean' Edge LP Method)", xlab="Community Number", ylab="Community Size")
largest_comm_index <- which.max(sizes(gcc_ud2_comm_FG))
nonLCNodes <- (1:vcount(gcc))[gcc_ud2_comm_FG$membership != largest_comm_index]
gcc_LC <- delete.vertices(gcc, nonLCNodes) #GCC Largest Community
# plot(gcc_LC, vertex.size=5, vertex.label.cex=0.4,edge.arrow.size=0.2)
# Convert gcc_LC to undirected graph (Option 2)
gcc_LC_ud <- as.undirected(gcc_LC,mode="collapse",edge.attr.comb = "prod")
E(gcc_LC_ud)$weight <- sqrt(E(gcc_LC_ud)$weight)
# Find Communities of subnet using FG
gcc_LC_ud_FG <- fastgreedy.community(gcc_LC_ud)
barplot(sizes(gcc_LC_ud_FG),  main="Community Structure of Largest Subcommunity", xlab="Community Number", ylab="Community Size")
#find the index of community size greater than 100
large_comm_index <- which(sizes(gcc_ud2_comm_FG)>100)
#find the subcommunity of each index
for (i in large_comm_index){
sub_gcc <- induced.subgraph(gcc_ud2, which(membership(gcc_ud2_comm_FG) == i))
sub_gcc_fg <- fastgreedy.community(sub_gcc)
barplot(sizes(sub_gcc_fg),  main="Community Structure of Largest Subcommunity", xlab="Community Number", ylab="Community Size")
#TODO: print information we need
}
large_comm_index <- which(sizes(gcc_ud2_comm_FG)>100)
#find the subcommunity of each index
for (i in large_comm_index){
sub_gcc <- induced.subgraph(gcc_ud2, which(membership(gcc_ud2_comm_FG) == i))
sub_gcc_fg <- fastgreedy.community(sub_gcc)
barplot(sizes(sub_gcc_fg),  main=c("Community Structure of Subcommunity", i), xlab="Community Number", ylab="Community Size")
#TODO: print information we need
}
M_i
while(example_count<maxexample){
# Random Walk and Teleport Params
currStep <- 0
maxSteps <- 35 # must be at least 31
damping_factor <- 85 # in %
# Initialize path.
path = c()
#choose random start node i
startNode<- sample(V(g_6),1)
#PLEASE CHECK: Do we add startNode to the path?
path <- c(path,as.numeric(attributes(startNode)$name))
# Run until you get enough steps in the path
while (currStep < maxSteps)
{
# Calculate length of segment before teleportation occurs
numStepsSeg <- 1 # Initialize number of steps before teleportation occurs
# Calculate whether teleportation occurs
smp <- sample(1:100,1)
while(smp<=damping_factor)
{
# If no teleportation, continue incrementing numStepsSeg
numStepsSeg <- numStepsSeg + 1
smp <- sample(1:100,1)
}
print(numStepsSeg)
if ((currStep + numStepsSeg) > maxSteps) {
numStepsSeg = maxSteps - currStep
}
currentNode<- startNode
for(t in 1:numStepsSeg){
nodeNeighbors <- neighbors(g_6,currentNode)
#print("neighborNodes")
#print(nodeNeighbors)
numNeighbors <- length(nodeNeighbors)
if(numNeighbors == 1){
nextNode <- nodeNeighbors
}else{
#calculate edge weight
edge_weight <- rep(0,numNeighbors)
for (k in 1:numNeighbors){
edge_weight[k] <- E(g_6,P=c(currentNode,nodeNeighbors[k]))$weight
}
#calculate probability
edge_weight_prob <-  rep(0,numNeighbors)
sum_weight <- sum(edge_weight)
for (l in 1:numNeighbors){
edge_weight_prob[l] <- (1-edge_weight[l]/sum_weight)/(numNeighbors-1)
}
# sample nextNode
nextNode <-  sample(nodeNeighbors, 1, replace = TRUE, prob = edge_weight_prob)
# Append segment to path
}
path = c(path,as.numeric(attributes(nextNode)$name))
currentNode <- nextNode
}
# Increment number of steps
currStep <- currStep + numStepsSeg
print(currStep/maxSteps)
}
# Extract table of node Instances
q <- table(path)
# Calculate probability of being at each node, including the starting node due to teleportation
pr <- q/length(path)
#Visiting Probability of all nodes in the network
visiting_prob = pr
#sort visiting probability
sorted_visiting_prob <- sort(visiting_prob,decreasing = TRUE, index.return=TRUE)
#initialize M_i and m_j
M_i = rep(0,length(comm_struct))
#calculate M_i with nodes j of top 30 visiting probability
for (j in 1:30){
#get top ith visiting probability
m_j = rep(0,length(comm_struct))  # n dimensional vector wiht only one element being 1
# denotes the community that v_j belongs to
v_j <- sorted_visiting_prob[j]
#get top ith visiting probability's node index
index_jth <- attributes(v_j)$name
#get top ith node index's membership
j_membership <- comm_struct$membership[as.numeric(index_jth)]
print(j_membership)
#build m_j (all 0s and 1 at j_membership)
m_j[j_membership]<-1
#print("v_j and m_j")
#print(index_jth)
print(m_j)
#calculate M_i
M_i <- M_i + (v_j*m_j)
#print("M_i")
#print(M_i)
}
print("startnode is")
print(startNode)
print("M_i")
print(M_i)
#find out whether M_i includes multiple values greater than the threshold
numComm <- 0
for(k in 1:length(M_i)){
if(M_i[k]>0.1){
numComm <- numComm + 1
}
}
#if there are multiple values passing the threshold from prvious for loop, add count to example_count
if(numComm >1){
example_count <- example_count + 1
print("startNode with multiple communities")
print(startNode)
}
}
g_6 <- gcc_ud2
comm_struct <- gcc_ud2_comm_FG
maxexample <- 4
example_count <- 0
while(example_count<maxexample){
# Random Walk and Teleport Params
currStep <- 0
maxSteps <- 35 # must be at least 31
damping_factor <- 85 # in %
# Initialize path.
path = c()
#choose random start node i
startNode<- sample(V(g_6),1)
#PLEASE CHECK: Do we add startNode to the path?
path <- c(path,as.numeric(attributes(startNode)$name))
# Run until you get enough steps in the path
while (currStep < maxSteps)
{
# Calculate length of segment before teleportation occurs
numStepsSeg <- 1 # Initialize number of steps before teleportation occurs
# Calculate whether teleportation occurs
smp <- sample(1:100,1)
while(smp<=damping_factor)
{
# If no teleportation, continue incrementing numStepsSeg
numStepsSeg <- numStepsSeg + 1
smp <- sample(1:100,1)
}
print(numStepsSeg)
if ((currStep + numStepsSeg) > maxSteps) {
numStepsSeg = maxSteps - currStep
}
currentNode<- startNode
for(t in 1:numStepsSeg){
nodeNeighbors <- neighbors(g_6,currentNode)
#print("neighborNodes")
#print(nodeNeighbors)
numNeighbors <- length(nodeNeighbors)
if(numNeighbors == 1){
nextNode <- nodeNeighbors
}else{
#calculate edge weight
edge_weight <- rep(0,numNeighbors)
for (k in 1:numNeighbors){
edge_weight[k] <- E(g_6,P=c(currentNode,nodeNeighbors[k]))$weight
}
#calculate probability
edge_weight_prob <-  rep(0,numNeighbors)
sum_weight <- sum(edge_weight)
for (l in 1:numNeighbors){
edge_weight_prob[l] <- (1-edge_weight[l]/sum_weight)/(numNeighbors-1)
}
# sample nextNode
nextNode <-  sample(nodeNeighbors, 1, replace = TRUE, prob = edge_weight_prob)
# Append segment to path
}
path = c(path,as.numeric(attributes(nextNode)$name))
currentNode <- nextNode
}
# Increment number of steps
currStep <- currStep + numStepsSeg
print(currStep/maxSteps)
}
# Extract table of node Instances
q <- table(path)
# Calculate probability of being at each node, including the starting node due to teleportation
pr <- q/length(path)
#Visiting Probability of all nodes in the network
visiting_prob = pr
#sort visiting probability
sorted_visiting_prob <- sort(visiting_prob,decreasing = TRUE, index.return=TRUE)
#initialize M_i and m_j
M_i = rep(0,length(comm_struct))
#calculate M_i with nodes j of top 30 visiting probability
for (j in 1:30){
#get top ith visiting probability
m_j = rep(0,length(comm_struct))  # n dimensional vector wiht only one element being 1
# denotes the community that v_j belongs to
v_j <- sorted_visiting_prob[j]
#get top ith visiting probability's node index
index_jth <- attributes(v_j)$name
#get top ith node index's membership
j_membership <- comm_struct$membership[as.numeric(index_jth)]
print(j_membership)
#build m_j (all 0s and 1 at j_membership)
m_j[j_membership]<-1
#print("v_j and m_j")
#print(index_jth)
print(m_j)
#calculate M_i
M_i <- M_i + (v_j*m_j)
#print("M_i")
#print(M_i)
}
print("startnode is")
print(startNode)
print("M_i")
print(M_i)
#find out whether M_i includes multiple values greater than the threshold
numComm <- 0
for(k in 1:length(M_i)){
if(M_i[k]>0.1){
numComm <- numComm + 1
}
}
#if there are multiple values passing the threshold from prvious for loop, add count to example_count
if(numComm >1){
example_count <- example_count + 1
print("startNode with multiple communities")
print(startNode)
}
}
neighbors(g_6, 10177)
are_adjacent(g_6, 10177, 1452)
adjacent_vertices(g_6, 10177)
neighbors(g_6,4966)
adjacent_vertices(g_6, 4966)
are_connected(g_6, 10392, 818)
are_adjacent(g_6, 10392, 818)
are_adjacent(g_6, 4966, 818)
length(V(g_6))
length(E(g_6))
neighbors(g_6, 1)
are_adjacent(g_6, 4966, 4967)
adjacent_vertices(g_6, 4966)
adjacent_vertices(g_6, 10177 )
are_adjacent(g_6, 4966, 4965)
are_adjacent(g_6, 4966, 4968)
are_adjacent(g_6, 4966, 1452)
gcc_ud2
are_adjacent(g_6, "4966", "1452")
sample(V(g_6),1)
neighbors(g_6, toString(252))
are_adjacent(g_6, "252","237")
are_adjacent(g_6, 252,237)
V(g_6, 10177)
V(g_6)[10177]
neighbors(g_6, V(g_6)[10177])
neighbors(gcc_ud_1, V(gcc_ud1)[10177])
gcc_ud1 <- as.undirected(gcc, mode = "each")
neighbors(gcc_ud_1, V(gcc_ud1)[10177])
neighbors(gcc_ud1, V(gcc_ud1)[10177])
source('~/Documents/EE232E/HW_3/HW_3.R', echo=TRUE)
source('~/Documents/EE232E/HW_3/HW_3.R', echo=TRUE)
source('~/Documents/EE232E/HW_3/HW_3.R', echo=TRUE)
V(g_6)[1482]
print(V(g_6)[1487])
