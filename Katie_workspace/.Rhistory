network_data <- read.csv(file = "~/Documents/EE219/network_backup_dataset.csv", header = TRUE)
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
fl_list <- split(network_data, as.factor(network_data$Work.Flow.ID))
hrVec = {}
for (ii in 0:4)
{
if (ii==0) {flTemp = fl_list$work_flow_0}
if (ii==1) {flTemp = fl_list$work_flow_1}
if (ii==2) {flTemp = fl_list$work_flow_2}
if (ii==3) {flTemp = fl_list$work_flow_3}
if (ii==4) {flTemp = fl_list$work_flow_4}
for (jj in 1:3)
{wk = flTemp[(flTemp$Week.. == jj),]
for (kk in 1:5)
{
dy = wk[(wk$Day.of.Week == days[kk]),]
for (ll in seq(1, 21, 4))
{
hr = dy[(dy$Backup.Start.Time...Hour.of.Day == ll),]
if (is.data.frame(hr) && nrow(hr)==0) { hrSum = 0 } else {
hrSum = sum(hr[6])
}
hrVec <- c(hrVec, hrSum)
# vec <- c(vec, p_value)
}
}
}
}
A = matrix(hrVec, nrow = 5)
plot(hrVec[2,], type = 'l')
# EE219 Project 1
housing_data <- read.csv(file = "~/Documents/EE219/housing_data.csv", header = FALSE)
network_data <- read.csv(file = "~/Documents/EE219/network_backup_dataset.csv", header = TRUE)
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
fl_list <- split(network_data, as.factor(network_data$Work.Flow.ID))
hrVec = {}
for (ii in 0:4)
{
if (ii==0) {flTemp = fl_list$work_flow_0}
if (ii==1) {flTemp = fl_list$work_flow_1}
if (ii==2) {flTemp = fl_list$work_flow_2}
if (ii==3) {flTemp = fl_list$work_flow_3}
if (ii==4) {flTemp = fl_list$work_flow_4}
for (jj in 1:3)
{wk = flTemp[(flTemp$Week.. == jj),]
for (kk in 1:5)
{
dy = wk[(wk$Day.of.Week == days[kk]),]
for (ll in seq(1, 21, 4))
{
hr = dy[(dy$Backup.Start.Time...Hour.of.Day == ll),]
if (is.data.frame(hr) && nrow(hr)==0) { hrSum = 0 } else {
hrSum = sum(hr[6])
}
hrVec <- c(hrVec, hrSum)
# vec <- c(vec, p_value)
}
}
}
}
A = matrix(hrVec, nrow = 5)
plot(hrVec[2], type = 'l')
hrVec[2]
# EE219 Project 1
housing_data <- read.csv(file = "~/Documents/EE219/housing_data.csv", header = FALSE)
network_data <- read.csv(file = "~/Documents/EE219/network_backup_dataset.csv", header = TRUE)
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
fl_list <- split(network_data, as.factor(network_data$Work.Flow.ID))
hrVec = {}
for (ii in 0:4)
{
if (ii==0) {flTemp = fl_list$work_flow_0}
if (ii==1) {flTemp = fl_list$work_flow_1}
if (ii==2) {flTemp = fl_list$work_flow_2}
if (ii==3) {flTemp = fl_list$work_flow_3}
if (ii==4) {flTemp = fl_list$work_flow_4}
for (jj in 1:3)
{wk = flTemp[(flTemp$Week.. == jj),]
for (kk in 1:5)
{
dy = wk[(wk$Day.of.Week == days[kk]),]
for (ll in seq(1, 21, 4))
{
hr = dy[(dy$Backup.Start.Time...Hour.of.Day == ll),]
if (is.data.frame(hr) && nrow(hr)==0) { hrSum = 0 } else {
hrSum = sum(hr[6])
}
hrVec <- c(hrVec, hrSum)
# vec <- c(vec, p_value)
}
}
}
}
A = matrix(hrVec, nrow = 5)
plot(A[2,], type = 'l')
plot(A[3,], type = 'l')
View(network_data)
# EE219 Project 1
housing_data <- read.csv(file = "~/Data/housing_data.csv", header = FALSE)
network_data <- read.csv(file = "~/Data/network_backup_dataset.csv", header = TRUE)
hrVec_0 = {}
hrVec_1 = {}
hrVec_2 = {}
hrVec_3 = {}
hrVec_4 = {}
fl_list <- split(network_data, as.factor(network_data$Work.Flow.ID))
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday")
for(ii in 0:4)
{
if (ii==0) {flTemp = fl_list$work_flow_0}
if (ii==1) {flTemp = fl_list$work_flow_1}
if (ii==2) {flTemp = fl_list$work_flow_2}
if (ii==3) {flTemp = fl_list$work_flow_3}
if (ii==4) {flTemp = fl_list$work_flow_4}
for (jj in 1:3)
{
wk = flTemp[(flTemp$Week.. ==1),]
for (kk in 1:7)
{
dy = wk[(wk$Day.of.Week == days[kk]),]
for (ll in seq(1, 21, 4))
{
hr = dy[(dy$Backup.Start.Time...Hour.of.Day == ll),]
if (is.data.frame(hr) && nrow(hr)==0)
{ hrSum = 0 }
else {
hrSum = sum(hr[6])
}
if (jj ==3 & kk == 7 & ll==21){
break
}
else{
if (ii==0) {hrVec_0 <- c(hrVec_0, hrSum)}
if (ii==1) {hrVec_1 <- c(hrVec_1, hrSum)}
if (ii==2) {hrVec_2 <- c(hrVec_2, hrSum)}
if (ii==3) {hrVec_3 <- c(hrVec_3, hrSum)}
if (ii==4) {hrVec_4 <- c(hrVec_4, hrSum)}
}
}
}
}
}
plot(hrVec_0, type = 'l')
plot(hrVec_1, type = 'l')
plot(hrVec_2, type = 'l')
plot(hrVec_3, type = 'l')
plot(hrVec_4, type = 'l')
xplot <- seq(1, 20, length.out=125)
plot(xplot, hrVec_0, type = 'l')
plot(xplot, hrVec_0, main="Work Flow 0",
xlab="Day", ylab="Backup Data Size (GB)",
type = 'l')
housing_data <- read.csv(file = "~/Data/housing_data.csv", header = FALSE)
# EE219 Project 1
housing_data <- read.csv(file = "~/Data/housing_data.csv", header = FALSE)
network_data <- read.csv(file = "~/Data/network_backup_dataset.csv", header = TRUE)
hrVec_0 = {}
hrVec_1 = {}
hrVec_2 = {}
hrVec_3 = {}
hrVec_4 = {}
fl_list <- split(network_data, as.factor(network_data$Work.Flow.ID))
# first split the data according to workflow
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
# create string vector for looping through each day
for(ii in 0:4)
{
if (ii==0) {flTemp = fl_list$work_flow_0}
if (ii==1) {flTemp = fl_list$work_flow_1}
if (ii==2) {flTemp = fl_list$work_flow_2}
if (ii==3) {flTemp = fl_list$work_flow_3}
if (ii==4) {flTemp = fl_list$work_flow_4}
for (jj in 1:3)
{
wk = flTemp[(flTemp$Week.. ==jj),]
# separate data by week
for (kk in 1:7)
{
dy = wk[(wk$Day.of.Week == days[kk]),]
for (ll in seq(1, 21, 4))
{
hr = dy[(dy$Backup.Start.Time...Hour.of.Day == ll),]
if (is.data.frame(hr) && nrow(hr)==0)
{ hrSum = 0 }
else {
hrSum = sum(hr[6])
}
if (jj ==3 & kk == 7 & ll==21){
break         # do not plot the last day of week 3 (stop at day 20)
}
else{
if (ii==0) {hrVec_0 <- c(hrVec_0, hrSum)}
if (ii==1) {hrVec_1 <- c(hrVec_1, hrSum)}
if (ii==2) {hrVec_2 <- c(hrVec_2, hrSum)}
if (ii==3) {hrVec_3 <- c(hrVec_3, hrSum)}
if (ii==4) {hrVec_4 <- c(hrVec_4, hrSum)}
}
}
}
}
}
xplot <- seq(1, 20, length.out=125)
# create vector for plotting the data, size is number of hours
plot(xplot, hrVec_0, main="Work Flow 0",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_1, main="Work Flow 1",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_2, main="Work Flow 2",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_3, main="Work Flow 3",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_4, main="Work Flow 4",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
cor.test(network_data$Day.of.Week,network_data$Size.of.Backup..GB.)$p.value
A = {}
A[1] = 2
A[2] = 2
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
days[days == "Monday",]$Monday = 1
network_data[network_data$Day.of.Week == "Monday",]$Day.of.Week = 0
View(network_data)
network_data <- read.csv(file = "~/Data/network_backup_dataset.csv", header = TRUE)
network_data <- read.csv(file = "~network_backup_dataset.csv", header = TRUE)
housing_data <- read.csv(file = "~/housing_data.csv", header = FALSE)
network_data <- read.csv(file = "~/network_backup_dataset.csv", header = TRUE)
# import data from csv files
A = c(0,0;0,0)
network_data[network_data$Day.of.Week == "Monday"]$Day.of.Week = 0
network_data[network_data$Day.of.Week == "Monday",]$Day.of.Week = 0
View(network_data)
rm(list = ls())
housing_data <- read.csv(file = "~/housing_data.csv", header = FALSE)
network_data <- read.csv(file = "~/network_backup_dataset.csv", header = TRUE)
# import data from csv files
# EE219 Project 1
housing_data <- read.csv(file = "~/Documents/EE219/housing_data.csv", header = FALSE)
network_data <- read.csv(file = "~/Documents/EE219/network_backup_dataset.csv", header = TRUE)
# import data from csv files
hrVec_0 = {}
hrVec_1 = {}
hrVec_2 = {}
hrVec_3 = {}
hrVec_4 = {}
# create empty vectors for storing data according to work flow
fl_list <- split(network_data, as.factor(network_data$Work.Flow.ID))
# separate the data according to workflow
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
# create string vector for looping through each day
for(ii in 0:4)
{
if (ii==0) {flTemp = fl_list$work_flow_0}
if (ii==1) {flTemp = fl_list$work_flow_1}
if (ii==2) {flTemp = fl_list$work_flow_2}
if (ii==3) {flTemp = fl_list$work_flow_3}
if (ii==4) {flTemp = fl_list$work_flow_4}
# create cases for each work flow
for (jj in 1:3)
{
wk = flTemp[(flTemp$Week.. ==jj),]
# separate the data by week
for (kk in 1:7)
{
dy = wk[(wk$Day.of.Week == days[kk]),]
# separate the data by day of the week (using strings created before)
for (ll in seq(1, 21, 4))
{
hr = dy[(dy$Backup.Start.Time...Hour.of.Day == ll),]
# separate the data by backup start hour
if (is.data.frame(hr) && nrow(hr)==0)
{ hrSum = 0 }
# some work flows do not get backed up and are empty at this stage
# set the size of the data at zero when this occurs
else {
hrSum = sum(hr[6])
# otherwise, sum the sizes of the files
}
if (jj ==3 & kk == 7 & ll==21){
break
# do not plot the last day of week 3 (stop at day 20)
}
else{
if (ii==0) {hrVec_0 <- c(hrVec_0, hrSum)}
if (ii==1) {hrVec_1 <- c(hrVec_1, hrSum)}
if (ii==2) {hrVec_2 <- c(hrVec_2, hrSum)}
if (ii==3) {hrVec_3 <- c(hrVec_3, hrSum)}
if (ii==4) {hrVec_4 <- c(hrVec_4, hrSum)}
# put data into vectors according to work flow
}
}
}
}
}
xplot <- seq(1, 20, length.out=125)
# create vector for plotting the data, size is number of hours
plot(xplot, hrVec_0, main="Work Flow 0",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_1, main="Work Flow 1",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_2, main="Work Flow 2",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_3, main="Work Flow 3",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_4, main="Work Flow 4",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
network_data2 = network_data;
network_data2[network_data2$Day.of.Week == "Monday",]$Day.of.Week = 0
View(network_data2)
network_data2 = network_data;
network_data2[network_data2$Day.of.Week == "Monday",]$Day.of.Week <- 0
network_data2 = network_data;
network_data2$Day.of.Week[network_data2$Day.of.Week == "Monday"] <- 0
housing_data <- read.csv(file = "~/Documents/EE219/housing_data.csv", header = FALSE, stringsAsFactors=FALSE)
network_data <- read.csv(file = "~/Documents/EE219/network_backup_dataset.csv", header = TRUE, stringsAsFactors=FALSE)
# import data from csv files
network_data2 = network_data;
network_data2$Day.of.Week[network_data2$Day.of.Week == "Monday"] <- 0
View(network_data2)
View(network_data2)
View(network_data2)
View(network_data2)
network_data2$Day.of.Week[network_data2$Day.of.Week == "Monday"] = 0
network_data2$Day.of.Week[1]-1
network_data2$Day.of.Week[1]
network_data2$Day.of.Week[network_data2$Day.of.Week == "Monday"] <- as.numeric(0)
network_data2$Day.of.Week[1]
network_data2$Day.of.Week[1] -1
View(flTemp)
View(housing_data)
View(housing_data)
cor.test(housing_data$V1,housing_data$V14)$p.value
pCRIM = cor.test(housing_data$V1,housing_data$V14)$p.value
pZN = cor.test(housing_data$V2,housing_data$V14)$p.value
pINDUS = cor.test(housing_data$V3,housing_data$V14)$p.value
pCHAS = cor.test(housing_data$V4,housing_data$V14)$p.value
pNOX = cor.test(housing_data$V5,housing_data$V14)$p.value
pRM = cor.test(housing_data$V6,housing_data$V14)$p.value
pAGE = cor.test(housing_data$V7,housing_data$V14)$p.value
pDIS = cor.test(housing_data$V8,housing_data$V14)$p.value
pRAD = cor.test(housing_data$V9,housing_data$V14)$p.value
pTAX = cor.test(housing_data$V10,housing_data$V14)$p.value
pPTRATIO = cor.test(housing_data$V11,housing_data$V14)$p.value
pB1000 = cor.test(housing_data$V12,housing_data$V14)$p.value
pLSTAT = cor.test(housing_data$V13,housing_data$V14)$p.value
cor.test(housing_data$V1,housing_data$V14)$p.value
cor.test(housing_data$V2,housing_data$V14)$p.value
cor.test(housing_data$V3,housing_data$V14)$p.value
cor.test(housing_data$V4,housing_data$V14)$p.value
cor.test(housing_data$V5,housing_data$V14)$p.value
cor.test(housing_data$V6,housing_data$V14)$p.value
cor.test(housing_data$V7,housing_data$V14)$p.value
cor.test(housing_data$V8,housing_data$V14)$p.value
cor.test(housing_data$V9,housing_data$V14)$p.value
cor.test(housing_data$V10,housing_data$V14)$p.value
cor.test(housing_data$V11,housing_data$V14)$p.value
cor.test(housing_data$V12,housing_data$V14)$p.value
cor.test(housing_data$V13,housing_data$V14)$p.value
# EE219 Project 1
#-------------------------------------------------------------------------------------#
# Network Backup Dataset
# 1) Backup Data Patterns
housing_data <- read.csv(file = "~/Documents/EE219/housing_data.csv", header = FALSE, stringsAsFactors=FALSE)
network_data <- read.csv(file = "~/Documents/EE219/network_backup_dataset.csv", header = TRUE, stringsAsFactors=FALSE)
# import data from csv files
# might need to change to file location!
hrVec_0 = {}
hrVec_1 = {}
hrVec_2 = {}
hrVec_3 = {}
hrVec_4 = {}
# create empty vectors for storing data according to work flow
fl_list <- split(network_data, as.factor(network_data$Work.Flow.ID))
# separate the data according to workflow
days = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
# create string vector for looping through each day
for(ii in 0:4)
{
if (ii==0) {flTemp = fl_list$work_flow_0}
if (ii==1) {flTemp = fl_list$work_flow_1}
if (ii==2) {flTemp = fl_list$work_flow_2}
if (ii==3) {flTemp = fl_list$work_flow_3}
if (ii==4) {flTemp = fl_list$work_flow_4}
# create cases for each work flow
for (jj in 1:3)
{
wk = flTemp[(flTemp$Week.. ==jj),]
# separate the data by week
for (kk in 1:7)
{
dy = wk[(wk$Day.of.Week == days[kk]),]
# separate the data by day of the week (using strings created before)
for (ll in seq(1, 21, 4))
{
hr = dy[(dy$Backup.Start.Time...Hour.of.Day == ll),]
# separate the data by backup start hour
if (is.data.frame(hr) && nrow(hr)==0)
{ hrSum = 0 }
# some work flows do not get backed up and are empty at this stage
# set the size of the data at zero when this occurs
else {
hrSum = sum(hr[6])
# otherwise, sum the sizes of the files
}
if (jj ==3 & kk == 7 & ll==21){
break
# do not plot the last day of week 3 (stop at day 20)
}
else{
if (ii==0) {hrVec_0 <- c(hrVec_0, hrSum)}
if (ii==1) {hrVec_1 <- c(hrVec_1, hrSum)}
if (ii==2) {hrVec_2 <- c(hrVec_2, hrSum)}
if (ii==3) {hrVec_3 <- c(hrVec_3, hrSum)}
if (ii==4) {hrVec_4 <- c(hrVec_4, hrSum)}
# put data into vectors according to work flow
}
}
}
}
}
xplot <- seq(1, 20, length.out=125)
# create vector for plotting the data, size is number of hours
plot(xplot, hrVec_0, main="Work Flow 0",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_1, main="Work Flow 1",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_2, main="Work Flow 2",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_3, main="Work Flow 3",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
plot(xplot, hrVec_4, main="Work Flow 4",
xlab="Day", ylab="Backup Data Size (GB)", type = 'l')
# 2) Linear Regression p-values
week = network_data$Week..
dayofweek = {}
backupstarttime=  network_data$Backup.Start.Time...Hour.of.Day
workflowid = {}
filename = {}
sizeofbackup = network_data$Size.of.Backup..GB.
backuptime = network_data$Backup.Time..hour.
# p-values by Week
pval_week = cor.test(network_data$Week..,network_data$Size.of.Backup..GB.)$p.value
# p-values by Day of Week
dayofweek[network_data$Day.of.Week=="Monday"] <- 0
dayofweek[network_data$Day.of.Week=="Tuesday"] <- 1
dayofweek[network_data$Day.of.Week=="Wednesday"]<-2
dayofweek[network_data$Day.of.Week=="Thursday"]<-3
dayofweek[network_data$Day.of.Week=="Friday"]<-4
dayofweek[network_data$Day.of.Week=="Saturday"]<-5
dayofweek[network_data$Day.of.Week=="Sunday"]<-6
pval_dayofweek = cor.test(dayofweek,network_data$Size.of.Backup..GB.)$p.value
# p-values by Backup Start Time
pval_starttime = cor.test(network_data$Backup.Start.Time...Hour.of.Day,network_data$Size.of.Backup..GB.)$p.value
# p-values by Workflow ID
workflowid[network_data$Work.Flow.ID=="work_flow_0"] <- 0
workflowid[network_data$Work.Flow.ID=="work_flow_1"] <- 1
workflowid[network_data$Work.Flow.ID=="work_flow_2"] <-2
workflowid[network_data$Work.Flow.ID=="work_flow_3"] <-3
workflowid[network_data$Work.Flow.ID=="work_flow_4"] <-4
pval_workflowid= cor.test(workflowid,network_data$Size.of.Backup..GB.)$p.value
# p-values by File Name
filename[network_data$File.Name=="File_0"] <- 0
filename[network_data$File.Name=="File_1"] <- 1
filename[network_data$File.Name=="File_2"] <- 2
filename[network_data$File.Name=="File_3"] <- 3
filename[network_data$File.Name=="File_4"] <- 4
filename[network_data$File.Name=="File_5"] <- 5
filename[network_data$File.Name=="File_6"] <- 6
filename[network_data$File.Name=="File_7"] <- 7
filename[network_data$File.Name=="File_8"] <- 8
filename[network_data$File.Name=="File_9"] <- 9
filename[network_data$File.Name=="File_10"] <- 10
filename[network_data$File.Name=="File_11"] <- 1
filename[network_data$File.Name=="File_12"] <- 12
filename[network_data$File.Name=="File_13"] <- 13
filename[network_data$File.Name=="File_14"] <- 14
filename[network_data$File.Name=="File_15"] <- 15
filename[network_data$File.Name=="File_16"] <- 16
filename[network_data$File.Name=="File_17"] <- 17
filename[network_data$File.Name=="File_18"] <- 18
filename[network_data$File.Name=="File_19"] <- 19
filename[network_data$File.Name=="File_20"] <- 20
filename[network_data$File.Name=="File_21"] <- 21
filename[network_data$File.Name=="File_22"] <- 22
filename[network_data$File.Name=="File_23"] <- 23
filename[network_data$File.Name=="File_24"] <- 24
filename[network_data$File.Name=="File_25"] <- 25
filename[network_data$File.Name=="File_26"] <- 26
filename[network_data$File.Name=="File_27"] <- 27
filename[network_data$File.Name=="File_28"] <- 28
filename[network_data$File.Name=="File_29"] <- 29
pval_filename = cor.test(filename,network_data$Size.of.Backup..GB.)$p.value
# p-values by Backup Time
pval_backuptime = cor.test(backuptime,network_data$Size.of.Backup..GB.)$p.value
#-------------------------------------------------------------------------------------#
# Boston Housing Dataset
# 4) Regression by Features
# P-value calculations for Boston Housing Data
pCRIM = cor.test(housing_data$V1,housing_data$V14)$p.value
pZN = cor.test(housing_data$V2,housing_data$V14)$p.value
pINDUS = cor.test(housing_data$V3,housing_data$V14)$p.value
pCHAS = cor.test(housing_data$V4,housing_data$V14)$p.value
pNOX = cor.test(housing_data$V5,housing_data$V14)$p.value
pRM = cor.test(housing_data$V6,housing_data$V14)$p.value
pAGE = cor.test(housing_data$V7,housing_data$V14)$p.value
pDIS = cor.test(housing_data$V8,housing_data$V14)$p.value
pRAD = cor.test(housing_data$V9,housing_data$V14)$p.value
pTAX = cor.test(housing_data$V10,housing_data$V14)$p.value
pPTRATIO = cor.test(housing_data$V11,housing_data$V14)$p.value
pB1000 = cor.test(housing_data$V12,housing_data$V14)$p.value
pLSTAT = cor.test(housing_data$V13,housing_data$V14)$p.value
source('~/Documents/232_hw1.R', echo=TRUE)
source('~/Documents/232_hw1.R', echo=TRUE)
install.packages("igraph")
